import qs from "qs";
import { useEffect, useRef } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link, useNavigate } from "react-router-dom";
import {
  selectFilters,
  selectItemsData,
  setFilters,
  setcurrentPage,
} from "../redux/slices/filterSlice";
import { fetchItems } from "../redux/slices/itemsSlice";
import Categories from "../—Åomponents/Categories";
import Pagination from "../—Åomponents/Pagination/Pagination";
import Sort, { sortList } from "../—Åomponents/Sort";
import ItemBlock from "../—Åomponents/ItemBlock/ItemBlock";
import Skeleton from "../—Åomponents/ItemBlock/Skeleton";

const Home: React.FC = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const isSearch = useRef(false);
  const isMounted = useRef(false);

  const { categoryId, sortType, searchText, currentPage } =
    useSelector(selectFilters);
  const { items, status } = useSelector(selectItemsData);

  const getItems = async () => {
    const category = categoryId > 0 ? `category=${categoryId}` : "";
    const search = searchText ? `search=${searchText}` : "";

    dispatch(
      // @ts-ignore
      fetchItems({
        currentPage,
        category,
        sortProperty: sortType.sortProperty,
        search,
      })
    );

    window.scrollTo(0, 0);
  };

  // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø–æ–¥–≥–æ—Ç–æ–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ "qs"
  useEffect(() => {
    if (isMounted.current) {
      const queryString = qs.stringify({
        sortProperty: sortType.sortProperty,
        categoryId,
        currentPage: currentPage,
      });
      navigate(`?${queryString}`);
    }
    // –ü–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä - –æ–∫!
    isMounted.current = true;
  }, [categoryId, sortType.sortProperty, currentPage]);

  // –ï—Å–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ—á–∫–∏, —Ç–æ –ø–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—Ç—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–¥–∞–∫—Å
  useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1));
      const sort = sortList.find(
        (obj) => obj.sortProperty === params.sortProperty
      );
      dispatch(setFilters({ ...params, sort }));
    }
    isSearch.current = true;
  }, []);

  // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã.
  useEffect(() => {
    // –ï—Å–ª–∏ –ø—Ä–∏—à–∏–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–π
    // if (!isSearch.current) {
    // –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    getItems();
    // }

    isSearch.current = false;
  }, [categoryId, sortType.sortProperty, searchText, currentPage]);

  const onChangePage = (page: number) => {
    dispatch(setcurrentPage(page));
  };

  return (
    <div className="container">
      <div className="content__top">
        <Categories />
        <Sort />
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>

      {status === "error" ? (
        <div className="content__error-info">
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞üòï</h2>
          <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã</p>
        </div>
      ) : (
        <div className="content__items">
          {status === "loading"
            ? [...new Array(6)].map((_, index) => <Skeleton key={index} />)
            : items.map((obj: any) => (
                <Link key={obj.id} to={`/item/${obj.id}`}>
                  <ItemBlock {...obj} />
                </Link>
              ))}
        </div>
      )}
      <Pagination onChangePage={onChangePage} currentPage={currentPage} />
    </div>
  );
};

export default Home;
